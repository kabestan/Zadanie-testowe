//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CommonCode.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "16.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("CommonCode.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SELECT COUNT(RecordId), COUNT(DISTINCT WorkerId), ActionType FROM RCPlogs
        ///WHERE ActionType != 0
        ///AND ActionType != 1
        ///AND ActionType != 5
        ///GROUP BY ActionType;
        ///
        ///SELECT * FROM RCPlogs
        ///WHERE ActionType != 0
        ///AND ActionType != 1
        ///AND ActionType != 5;
        ///
        ///SELECT COUNT(RecordId), LoggerType FROM RCPlogs
        ///WHERE LoggerType != 0
        ///AND LoggerType != 1
        ///GROUP BY LoggerType;
        ///.
        /// </summary>
        internal static string BadValues {
            get {
                return ResourceManager.GetString("BadValues", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DROP DATABASE IF EXISTS [RCPdb];
        ///CREATE DATABASE [RCPdb];
        ///GO
        ///USE [RCPdb];
        ///
        ///CREATE TABLE [RCPlogs]
        ///(
        ///	[RecordId]		INT				NOT NULL PRIMARY KEY,
        ///	[Timestamp]		SMALLDATETIME	NOT NULL,
        ///    [WorkerId]		INT				NOT NULL, 
        ///    [ActionType]	TINYINT			NOT NULL, 
        ///    [LoggerType]	TINYINT			NOT NULL
        ///)
        ///
        ///DROP INDEX IF EXISTS RCPlogs.uniqueRecords;
        ///CREATE UNIQUE NONCLUSTERED INDEX uniqueRecords
        ///ON RCPlogs (
        ///	Timestamp ASC,
        ///	WorkerId ASC,
        ///	ActionType ASC,
        ///	LoggerType ASC)
        ///WITH(
        ///	IGNORE_DUP_KEY = ON);.
        /// </summary>
        internal static string CreateDatabaseStructure {
            get {
                return ResourceManager.GetString("CreateDatabaseStructure", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to --DECLARE @start int, @count int; SET @start = -1; SET @count = 100;
        ///IF @start &lt; 0
        ///	SET @start = (SELECT MAX([RecordId]) - @count + 1 FROM[RCPlogs]);
        ///SELECT * FROM [RCPlogs] WHERE [RecordId] &gt;= @start AND [RecordId] &lt; @start + @count;.
        /// </summary>
        internal static string GetRecords {
            get {
                return ResourceManager.GetString("GetRecords", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to CREATE OR ALTER VIEW dateTimeSplit AS
        ///	SELECT 
        ///		Timestamp AS RecordDateTime,
        ///		YEAR(Timestamp) AS RecordYear,
        ///		MONTH(Timestamp) AS RecordMonth,
        ///		WorkerId AS RecordWorkerId,
        ///		LoggerType AS RecordSource,
        ///		ActionType AS RecordType
        ///	FROM 
        ///		RCPlogs
        ///	WHERE 
        ///		ActionType = 0 -- &apos;entry&apos;
        ///		OR ActionType = 1 -- &apos;exit&apos;
        ///		OR ActionType = 5 -- &apos;exitAux&apos;
        ///GO
        ///
        ///CREATE OR ALTER FUNCTION RecordsOfWorker (@RecordWorkerId INT)
        ///RETURNS TABLE
        ///RETURN SELECT 
        ///		*,
        ///		LAG(RecordType) OVER(ORDER BY RecordDate [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GetReport {
            get {
                return ResourceManager.GetString("GetReport", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to CREATE OR ALTER FUNCTION NextRecordId()
        ///RETURNS INT
        ///BEGIN 
        ///	DECLARE @nextId INT = 0;
        ///	SELECT @nextId = ISNULL(MAX(RecordId), 0) + 1 FROM RCPdb.dbo.RCPlogs;
        ///	RETURN @nextId;
        ///END
        ///GO
        ///
        ///CREATE OR ALTER PROCEDURE InsertDistinct (@RecordDateTime DATETIME, @RecordWorkerId INT, @RecordType INT, @RecordSource INT)
        ///AS
        ///INSERT INTO RCPdb.dbo.RCPlogs (RecordId, Timestamp, WorkerId, ActionType, LoggerType)
        ///	VALUES (RCPdb.dbo.NextRecordId(), @RecordDateTime, @RecordWorkerId, @RecordType, @RecordSource);
        ///.
        /// </summary>
        internal static string InsertDistinctProcedure {
            get {
                return ResourceManager.GetString("InsertDistinctProcedure", resourceCulture);
            }
        }
    }
}
